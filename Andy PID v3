import cv2
import cv2.aruco as aruco
import numpy as np
from gpiozero import AngularServo
from time import sleep
from gpiozero.pins.pigpio import PiGPIOFactory

# Initialize video capture with lower resolution for faster processing
vid = cv2.VideoCapture(0)
vid.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
vid.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
print("Video started")

# ArUco dictionary for 7x7 marker detection
arucoDict = aruco.Dictionary_get(aruco.DICT_7X7_50)
arucoParam = aruco.DetectorParameters_create()

# Initialize servos with PiGPIO factory
pigpio_factory = PiGPIOFactory()
servo1 = AngularServo(18, pin_factory=pigpio_factory)
servo2 = AngularServo(13, pin_factory=pigpio_factory)
servo1.angle, servo2.angle = 0, 0
sleep(2)
print("Servos initialized.")

# PID Control constants
Kp, Kd = 80, 10
cx, cy = -1, 1  # Flip signs for servo direction correction

def findArucoMarkers(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    bbox, ids, _ = aruco.detectMarkers(gray, arucoDict, parameters=arucoParam)
    if ids is not None:
        aruco.drawDetectedMarkers(img, bbox)
    return bbox, ids

def getAdjustment(windowMax, x):
    normalized_adjustment = x / windowMax - 0.5
    adjustment_direction = -1 if normalized_adjustment > 0 else 1
    return abs(round(normalized_adjustment, 1)), adjustment_direction

# Main loop
while True:
    ret, img = vid.read()
    if not ret:
        break

    bbox, ids = findArucoMarkers(img)
    if ids is not None:
        top_left = bbox[0][0][0][0], bbox[0][0][0][1]
        bottom_right = bbox[0][0][2][0], bbox[0][0][2][1]
        centre = ((top_left[0] + bottom_right[0]) // 2, (top_left[1] + bottom_right[1]) // 2)

        window = img.shape
        xmag, xdir = getAdjustment(window[0], centre[1])
        ymag, ydir = getAdjustment(window[1], centre[0])

        # PID-based adjustments
        adj_x = cx * (Kp * xdir * xmag)
        adj_y = cy * (Kp * ydir * ymag)

        servo1.angle = max(-90, min(90, servo1.angle + adj_x))
        servo2.angle = max(-90, min(90, servo2.angle + adj_y))

        # Display the camera feed with markers
        cv2.imshow("Camera Feed", img)

    # Quit program on pressing 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
vid.release()
cv2.destroyAllWindows()
